{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Downstream Library For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#downstream-library","text":"For full documentation visit mkdocs.org .","title":"Downstream Library"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About this document This website is a collection of worked examples for instructors to illustrate how to incorporate Computational Thinking, Nature Inspired Design, and Social Technical issues into CECE Year 2-4/5 course. This prototype library is built on a Raspberry Pi 4 (4GB) running Ubuntu 20.XX. A complete backup is located at [github-url-here] The actual site is hosted on an AWS Lightsail Instance [fqdn-url-here] On-Line Library Author's Notes Inserting Code Fragments To insert a code fragment such as print('Hello World') simply indent in the source file used to generate the document print('hello world') These fragments can be cut-and-paste into a JupyterLab notebook. Inserting Images If the image is taken from a URL, use the following: ![image-name (a local tag)](url_to_image_source) Such as: ![image-name](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQqn40YbupkMAzY63jYtA6auEmjRfCOvCd0FA&usqp=CAU) Which will render a black swan: If the image is local to the host replace the url with the path to the image. Inserting URL links This is a variation of images, but without the ! , such as [link-name-that-will-display](url_to_link_destimation) For example the code below will link to the black swan search results: [link-to-images-of-black-swans](https://www.google.com/search?q=images+of+black+swan&client=safari&rls=en&sxsrf=ALeKk03oIoQ387TWjJoKzX-D_b7o1to43Q:1613002985584&tbm=isch&source=iu&ictx=1&fir=L2P5MiS1ICLTxM%252CC6BDdJoXT9KcEM%252C_&vet=1&usg=AI4_-kTXrBMpj__xL5IkGCshrXTp04fX3w&sa=X&ved=2ahUKEwiCneivyODuAhVJBs0KHY88CaAQ9QF6BAgUEAE&biw=1447&bih=975#imgrc=i_lxoojURNE3XM) link-to-images-of-black-swans Inserting LaTex-like mathematical typesetting Lets try ordinary Latex mathematics first: \\begin{equation} F(x) = \\int_{-\\inf}^{x}{f(\\tau)d \\tau} \\end{equation} \\begin{equation} F(x) = \\int_{-\\inf}^{x}{f(\\tau)d \\tau} \\end{equation} then: \\begin{equation} \\delta x \\end{equation} Ok, so we don't get the eqn numbering, but we can typeset mathematics! In-line math is not working just yet \\Delta x .","title":"About"},{"location":"about/#about-this-document","text":"This website is a collection of worked examples for instructors to illustrate how to incorporate Computational Thinking, Nature Inspired Design, and Social Technical issues into CECE Year 2-4/5 course. This prototype library is built on a Raspberry Pi 4 (4GB) running Ubuntu 20.XX. A complete backup is located at [github-url-here] The actual site is hosted on an AWS Lightsail Instance [fqdn-url-here]","title":"About this document"},{"location":"about/#on-line-library-authors-notes","text":"Inserting Code Fragments To insert a code fragment such as print('Hello World') simply indent in the source file used to generate the document print('hello world') These fragments can be cut-and-paste into a JupyterLab notebook. Inserting Images If the image is taken from a URL, use the following: ![image-name (a local tag)](url_to_image_source) Such as: ![image-name](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQqn40YbupkMAzY63jYtA6auEmjRfCOvCd0FA&usqp=CAU) Which will render a black swan: If the image is local to the host replace the url with the path to the image. Inserting URL links This is a variation of images, but without the ! , such as [link-name-that-will-display](url_to_link_destimation) For example the code below will link to the black swan search results: [link-to-images-of-black-swans](https://www.google.com/search?q=images+of+black+swan&client=safari&rls=en&sxsrf=ALeKk03oIoQ387TWjJoKzX-D_b7o1to43Q:1613002985584&tbm=isch&source=iu&ictx=1&fir=L2P5MiS1ICLTxM%252CC6BDdJoXT9KcEM%252C_&vet=1&usg=AI4_-kTXrBMpj__xL5IkGCshrXTp04fX3w&sa=X&ved=2ahUKEwiCneivyODuAhVJBs0KHY88CaAQ9QF6BAgUEAE&biw=1447&bih=975#imgrc=i_lxoojURNE3XM) link-to-images-of-black-swans Inserting LaTex-like mathematical typesetting Lets try ordinary Latex mathematics first: \\begin{equation} F(x) = \\int_{-\\inf}^{x}{f(\\tau)d \\tau} \\end{equation} \\begin{equation} F(x) = \\int_{-\\inf}^{x}{f(\\tau)d \\tau} \\end{equation} then: \\begin{equation} \\delta x \\end{equation} Ok, so we don't get the eqn numbering, but we can typeset mathematics! In-line math is not working just yet \\Delta x .","title":"On-Line Library Author's Notes"},{"location":"fluid/","text":"How to make an ordinary homework problem into a computational thinking exercise - Fluid Mechanics Prerequesites (for this example) Students will have completed ENGR-1330; CE 2301; and be enrolled in CE 3305 Students (by virtue of ENGR-1330) will have functioning implementations of JupyterLab Methodology for Problem (and Solution) Present problem verbatim from usual source, i.e. textbook Review main principles of CT : Algorithm - A list of steps that you can follow to finish a task Decomposition - Break a problem down into smaller pieces Abstraction - Pulling out specific differences to make one solution work for multiple problems Pattern Matching - Finding similarities between things CT Problem Solving Protocol (from ENGR-1330) Explicitly state the problem State: Input information Governing equations or principles, and The required output information. Work a sample problem by-hand for testing the general solution. Develop a general solution method (coding). Test the general solution against the by-hand example, then apply to the real problem. Start the problem/solution example; explicitly identify CT principles as problem proceedes. Choose meaningful problems Problem Statement (Cite Source) Jet-type pumps are often used for special applications, such as to circulate the flow in basins in which fish are farmed. The use of a jet-pump reduces mechanical injury to the fish. Figures 1 and 2 show the basic concept for this application of a jet pump. Figure 1 Plan View of a fish race Figure 2 Elevation detail of a fish race jet pump For this type of basin the jets would have to increase the water surface elevation by an amount equal to \\frac{6V^2}{2g} , where V is the average velocity in the basin ( 1~\\frac{ft}{s} as shown in the figures). Propose a basic design for a jet system that would make such a recirculating system work for a channel 8 ft wide and 4 ft deep. That is determine the nozzle diameter, speed, and number of nozzles. The design should specify nominal diameters of nozzles using commercially available pipes (1-in., 2-in, ...). How do the specifications change if the desired water depth is to be 6 feet deep (to accomodate more fish) Hint This problem involves \"analysis\" to determine the required momentum added by the jets and the total jet area and speed The design should be based on this analysis with an understanding that the total jet area should be small as compared to the total flow area (otherwise the fish could get stuck!). Problem Solving Protocol Recall the problem solving protocols in ENGR-1330 ENGR-1330-S2021-Cleveland Define the problem (problem statement) Gather information (identify known and unknown values, and governing equations) Generate and evaluate potential solutions Refine and implement a solution Verify and test the solution. We can stipulate that Step 1 is already done, Known Values: Geometry Liquid (Water) ( if we need properties we can get them from Water Properties Database , or something similar Unknown Values Jet diameter Jet speed Jet count (number of jets) Governing Principles These are going to be problem and discipline specific; in this case conservation of mass and momentum are going to be required. Abstraction -- The Control Volume Diagram At this point we are mostly trying to develop an algorithm, but are already about to apply abstraction when we create a Control-Volume Diagram of the mixing zone depicted in Figure 2. Figure 3 Control Volume Diagram of Mixing Zone Examining the diagram, we will further abstract by defining variables for our problem: \\begin{gather} \\begin{aligned} & F_1 == \\text{Pressure force on approach face of mixing zone } \\\\ & F_2 == \\text{Pressure force on exit face of mixing zone } \\\\ & u_1 == \\text{Free stream speed on approach face of mixing zone} \\\\ & u_2 == \\text{Free stream speed on exit face of mixing zone } \\\\ & u_j == \\text{Jet stream speed in mixing zone } \\\\ & A_1 == \\text{Free stream area of approach face of mixing zone } \\\\ & A_2 == \\text{Free stream ares of exit face of mixing zone } \\\\ & A_j == \\text{Jet stream speed in mixing zone } \\\\ \\end{aligned} \\end{gather} Decomposition - Continunity Analysis Recall the continunity result from the Reynolds Transport Theorem: 0 = \\frac{\\partial}{\\partial t}\\int_{CV} \\rho dV + \\int_{CS} \\rho(V \\cdot dA) Substitute the geometry from the problem conditions into the flux integral (the volume integral vanishes because we are considering steady flow) as 0 = \\rho u_2 A_2 - \\rho u_1 A_1 - \\rho u_j A_j where ~~~~~A_1 = W \\cdot (y_1 - \\Delta y) ~~~~~A_2 = W \\cdot (y_2) ~~~~~A_j = W \\cdot (\\Delta y) ~~~~~W = \\text{width of channel} Notice that if the channel is a constant width, and we stipulate that the liquid is incompressible so that the density is some constant, we can factor these out to obtain 0= u_2 \\cdot (y_2) - u_1 \\cdot (y_1 - \\Delta y) - u_j \\cdot (\\Delta y) Rewrite in terms of u_2 as: u_2 \\cdot (y_2) = u_1 \\cdot (y_1 - \\Delta y) + u_j \\cdot (\\Delta y) Divide by y_2 to obtain u_2 (which we will substitute into momentum shortly!) u_2 = \\frac{u_1 \\cdot (y_1 - \\Delta y) + u_j \\cdot (\\Delta y)}{y_2} Decomposition - Momentum Analysis Recall the momentum result from the Reynolds Transport Theorem: \\sum F_x = \\frac{\\partial}{\\partial t}\\int_{CV} V \\rho dV + \\int_{CS} V\\rho(V \\cdot dA) Consider force diffference: F_1 - F_2 = -u_j~\\rho~u_j A_j - u_1 \\rho u_1 A_1 + u_2 \\rho u_2 A_2 where ~~~~~A_1 = W \\cdot (y_1 - \\Delta y) ~~~~~A_2 = W \\cdot (y_2) ~~~~~A_j = W \\cdot (\\Delta y) ~~~~~W = \\text{width of channel} Stipulate hydrostatic pressure forces at upstream and downstream faces F_1 = \\rho g \\frac{y_1}{2} y_1 W F_2 = \\rho g \\frac{y_2}{2} y_2 W Now substitute into the momentum balance for the control volume \\rho g W (\\frac{y_1^2}{2} - \\frac{y_2^2}{2}) = -u_j~\\rho~u_j W \\cdot (\\Delta y) - u_1 \\rho u_1 W \\cdot (y_1 - \\Delta y) + u_2 \\rho u_2 W \\cdot (y_2) Notice that if the channel is a constant width, and we stipulate that the liquid is incompressible so that the density is some constant, we can factor these out to obtain g (\\frac{y_1^2}{2} - \\frac{y_2^2}{2}) = -u_j~u_j \\cdot (\\Delta y) - u_1 u_1 \\cdot (y_1 - \\Delta y) + u_2 u_2 \\cdot (y_2) Now arrange momentum in terms of the jet as u_j^2 ~\\Delta y = - u_1^2(y_1 - ~ \\Delta y) + u_2^2~y_2 - \\frac{g}{2}(y_1^2 - y_2^2) Substitute u_2 from continunity u_j^2 ~\\Delta y = - u_1^2(y_1 - ~ \\Delta y) + [\\frac{ u_1~(y_1 - ~ \\Delta y) - u_j ~\\Delta y}{y_2}]^2~y_2 - \\frac{g}{2}[y_1^2 - y_2^2] This equation is our model, it is implicit in u_j^2 ~\\Delta y , hence almost requires a computational approach to find a solution. As a first step, lets try a predictor-correction approach - that is we will simply guess values for cetrain unknowns, and see how close we can make thw two sides of the model agree. Algorithm (Initial Steps) Rudimentary Guess-Check Approach Verify what we know about the problem: u_1 = 1 \\text{ft/sec (given)} y_1 = 4 \\text{ft (given)} y_2 = 4 + \\frac{6(1)^2}{2(32.2)} = 4.0932 \\text{ft (indirectly given)} u_2 = f(u_j,\\Delta y) \\text{ (model equation)} u_j = \\text{unknown} \\Delta y = \\text{unknown} g = 32.2 \\text{ft/sec/sec (given)} Keep in mind that \\Delta y is proportional to the jet area, and the jets are small (unless we want to make our facility into a Bass-o-Matic youtube-link-bassomatic We will rearrange our model equation above, by dividing by \\Delta y u_j^2 = \\frac{- u_1^2(y_1 - ~ \\Delta y) + [\\frac{ u_1~(y_1 - ~ \\Delta y) - u_j ~\\Delta y}{y_2}]^2~y_2 - \\frac{g}{2}[y_1^2 - y_2^2]}{\\Delta y} Then gather all the terms involving u_j onto the left hand side as u_j^2 - \\frac{u_j^2 \\Delta y}{y_2} + \\frac{2 u_1 (y_1 - \\Delta y)}{y_2} = \\frac{- u_1^2(y_1 - ~ \\Delta y)}{\\Delta y} + \\frac{u_1^2 (y_1 - \\Delta y)^2}{y_2 \\Delta y} - \\frac{g}{2 \\Delta y}[y_1^2 - y_2^2] Now we are ready for computation - if we \"pick\" \\Delta y the only unknown is u_j ; therefore solvable. If we make a set of guesses, we can compute required jet speed and jet total area. First some preliminary coding, to use different jet speeds for a given \\Delta y dy = 0.1 #delta y width = 8.0 grav = 32.2 # gravitational acceleration constant (US Customary Units) u1 = 1.0 #free stream approach y1 = 4.0 #approach depth y2 = y1 + 6.0*(u1**2)/(2.0*grav) #exit depth as velocity head rhs = -u1*u1*(y1-dy)/dy + (u1*u1*(y1-dy)**2)/(y2*dy) - grav*(y1**2-y2**2)/(2*dy) for i in range(1,200): uj = float(i)*0.1 lhs = uj**2*(1-dy/y2) + 2*u1*(y1-dy)*uj/y2 if abs(lhs-rhs) <=2: #only print when close print('uj = ',round(uj,2),'LHS = ',round(lhs,2),'RHS = ',round(rhs,2)) uj = 10.1 LHS = 118.76 RHS = 119.56 uj = 10.2 LHS = 120.94 RHS = 119.56 So for a \\Delta y of 0.1, the required jet speed is somewhere around 10.1 feet per second. Now we need to determine the total jet area, and nominal sizes. areajet = dy*width import math def howManyJets(jetarea,diameter): perjet = 0.25*math.pi*diameter**2 if jetarea%perjet == 0: howManyJets = jetarea/perjet elif jetarea%perjet != 0: howManyJets = jetarea//perjet + 1 return howManyJets inches = 1/12 howManyJets(areajet,inches) 147.0 So for \\Delta y of 0.1 we will need 147 1-inch diameter jets. The next step is to refine and generalize our solution so we can explore different speeds - for example a 10 ft/sec jet will probably skin a fish, not healthy for our application. For refinement, lets improve the precision of the jet speed calculation (i.e. automate the matching of lhs and rhs) Algorithm (Refinement) Semi-Automated, Quasi-Newton,Approach Link to the JupyterLab notebook directory for this example","title":"Fluid Mechanics"},{"location":"fluid/#how-to-make-an-ordinary-homework-problem-into-a-computational-thinking-exercise-fluid-mechanics","text":"","title":"How to make an ordinary homework problem into a computational thinking exercise - Fluid Mechanics"},{"location":"fluid/#prerequesites-for-this-example","text":"Students will have completed ENGR-1330; CE 2301; and be enrolled in CE 3305 Students (by virtue of ENGR-1330) will have functioning implementations of JupyterLab","title":"Prerequesites (for this example)"},{"location":"fluid/#methodology-for-problem-and-solution","text":"Present problem verbatim from usual source, i.e. textbook Review main principles of CT : Algorithm - A list of steps that you can follow to finish a task Decomposition - Break a problem down into smaller pieces Abstraction - Pulling out specific differences to make one solution work for multiple problems Pattern Matching - Finding similarities between things CT Problem Solving Protocol (from ENGR-1330) Explicitly state the problem State: Input information Governing equations or principles, and The required output information. Work a sample problem by-hand for testing the general solution. Develop a general solution method (coding). Test the general solution against the by-hand example, then apply to the real problem. Start the problem/solution example; explicitly identify CT principles as problem proceedes. Choose meaningful problems","title":"Methodology for Problem (and Solution)"},{"location":"fluid/#problem-statement-cite-source","text":"Jet-type pumps are often used for special applications, such as to circulate the flow in basins in which fish are farmed. The use of a jet-pump reduces mechanical injury to the fish. Figures 1 and 2 show the basic concept for this application of a jet pump. Figure 1 Plan View of a fish race Figure 2 Elevation detail of a fish race jet pump For this type of basin the jets would have to increase the water surface elevation by an amount equal to \\frac{6V^2}{2g} , where V is the average velocity in the basin ( 1~\\frac{ft}{s} as shown in the figures). Propose a basic design for a jet system that would make such a recirculating system work for a channel 8 ft wide and 4 ft deep. That is determine the nozzle diameter, speed, and number of nozzles. The design should specify nominal diameters of nozzles using commercially available pipes (1-in., 2-in, ...). How do the specifications change if the desired water depth is to be 6 feet deep (to accomodate more fish) Hint This problem involves \"analysis\" to determine the required momentum added by the jets and the total jet area and speed The design should be based on this analysis with an understanding that the total jet area should be small as compared to the total flow area (otherwise the fish could get stuck!).","title":"Problem Statement (Cite Source)"},{"location":"fluid/#problem-solving-protocol","text":"Recall the problem solving protocols in ENGR-1330 ENGR-1330-S2021-Cleveland Define the problem (problem statement) Gather information (identify known and unknown values, and governing equations) Generate and evaluate potential solutions Refine and implement a solution Verify and test the solution. We can stipulate that Step 1 is already done,","title":"Problem Solving Protocol"},{"location":"fluid/#known-values","text":"Geometry Liquid (Water) ( if we need properties we can get them from Water Properties Database , or something similar","title":"Known Values:"},{"location":"fluid/#unknown-values","text":"Jet diameter Jet speed Jet count (number of jets)","title":"Unknown Values"},{"location":"fluid/#governing-principles","text":"These are going to be problem and discipline specific; in this case conservation of mass and momentum are going to be required.","title":"Governing Principles"},{"location":"fluid/#abstraction-the-control-volume-diagram","text":"At this point we are mostly trying to develop an algorithm, but are already about to apply abstraction when we create a Control-Volume Diagram of the mixing zone depicted in Figure 2. Figure 3 Control Volume Diagram of Mixing Zone Examining the diagram, we will further abstract by defining variables for our problem: \\begin{gather} \\begin{aligned} & F_1 == \\text{Pressure force on approach face of mixing zone } \\\\ & F_2 == \\text{Pressure force on exit face of mixing zone } \\\\ & u_1 == \\text{Free stream speed on approach face of mixing zone} \\\\ & u_2 == \\text{Free stream speed on exit face of mixing zone } \\\\ & u_j == \\text{Jet stream speed in mixing zone } \\\\ & A_1 == \\text{Free stream area of approach face of mixing zone } \\\\ & A_2 == \\text{Free stream ares of exit face of mixing zone } \\\\ & A_j == \\text{Jet stream speed in mixing zone } \\\\ \\end{aligned} \\end{gather}","title":"Abstraction -- The Control Volume Diagram"},{"location":"fluid/#decomposition-continunity-analysis","text":"Recall the continunity result from the Reynolds Transport Theorem: 0 = \\frac{\\partial}{\\partial t}\\int_{CV} \\rho dV + \\int_{CS} \\rho(V \\cdot dA) Substitute the geometry from the problem conditions into the flux integral (the volume integral vanishes because we are considering steady flow) as 0 = \\rho u_2 A_2 - \\rho u_1 A_1 - \\rho u_j A_j where ~~~~~A_1 = W \\cdot (y_1 - \\Delta y) ~~~~~A_2 = W \\cdot (y_2) ~~~~~A_j = W \\cdot (\\Delta y) ~~~~~W = \\text{width of channel} Notice that if the channel is a constant width, and we stipulate that the liquid is incompressible so that the density is some constant, we can factor these out to obtain 0= u_2 \\cdot (y_2) - u_1 \\cdot (y_1 - \\Delta y) - u_j \\cdot (\\Delta y) Rewrite in terms of u_2 as: u_2 \\cdot (y_2) = u_1 \\cdot (y_1 - \\Delta y) + u_j \\cdot (\\Delta y) Divide by y_2 to obtain u_2 (which we will substitute into momentum shortly!) u_2 = \\frac{u_1 \\cdot (y_1 - \\Delta y) + u_j \\cdot (\\Delta y)}{y_2}","title":"Decomposition - Continunity Analysis"},{"location":"fluid/#decomposition-momentum-analysis","text":"Recall the momentum result from the Reynolds Transport Theorem: \\sum F_x = \\frac{\\partial}{\\partial t}\\int_{CV} V \\rho dV + \\int_{CS} V\\rho(V \\cdot dA) Consider force diffference: F_1 - F_2 = -u_j~\\rho~u_j A_j - u_1 \\rho u_1 A_1 + u_2 \\rho u_2 A_2 where ~~~~~A_1 = W \\cdot (y_1 - \\Delta y) ~~~~~A_2 = W \\cdot (y_2) ~~~~~A_j = W \\cdot (\\Delta y) ~~~~~W = \\text{width of channel} Stipulate hydrostatic pressure forces at upstream and downstream faces F_1 = \\rho g \\frac{y_1}{2} y_1 W F_2 = \\rho g \\frac{y_2}{2} y_2 W Now substitute into the momentum balance for the control volume \\rho g W (\\frac{y_1^2}{2} - \\frac{y_2^2}{2}) = -u_j~\\rho~u_j W \\cdot (\\Delta y) - u_1 \\rho u_1 W \\cdot (y_1 - \\Delta y) + u_2 \\rho u_2 W \\cdot (y_2) Notice that if the channel is a constant width, and we stipulate that the liquid is incompressible so that the density is some constant, we can factor these out to obtain g (\\frac{y_1^2}{2} - \\frac{y_2^2}{2}) = -u_j~u_j \\cdot (\\Delta y) - u_1 u_1 \\cdot (y_1 - \\Delta y) + u_2 u_2 \\cdot (y_2) Now arrange momentum in terms of the jet as u_j^2 ~\\Delta y = - u_1^2(y_1 - ~ \\Delta y) + u_2^2~y_2 - \\frac{g}{2}(y_1^2 - y_2^2) Substitute u_2 from continunity u_j^2 ~\\Delta y = - u_1^2(y_1 - ~ \\Delta y) + [\\frac{ u_1~(y_1 - ~ \\Delta y) - u_j ~\\Delta y}{y_2}]^2~y_2 - \\frac{g}{2}[y_1^2 - y_2^2] This equation is our model, it is implicit in u_j^2 ~\\Delta y , hence almost requires a computational approach to find a solution. As a first step, lets try a predictor-correction approach - that is we will simply guess values for cetrain unknowns, and see how close we can make thw two sides of the model agree.","title":"Decomposition - Momentum Analysis"},{"location":"fluid/#algorithm-initial-steps","text":"","title":"Algorithm (Initial Steps)"},{"location":"fluid/#rudimentary-guess-check-approach","text":"Verify what we know about the problem: u_1 = 1 \\text{ft/sec (given)} y_1 = 4 \\text{ft (given)} y_2 = 4 + \\frac{6(1)^2}{2(32.2)} = 4.0932 \\text{ft (indirectly given)} u_2 = f(u_j,\\Delta y) \\text{ (model equation)} u_j = \\text{unknown} \\Delta y = \\text{unknown} g = 32.2 \\text{ft/sec/sec (given)} Keep in mind that \\Delta y is proportional to the jet area, and the jets are small (unless we want to make our facility into a Bass-o-Matic youtube-link-bassomatic We will rearrange our model equation above, by dividing by \\Delta y u_j^2 = \\frac{- u_1^2(y_1 - ~ \\Delta y) + [\\frac{ u_1~(y_1 - ~ \\Delta y) - u_j ~\\Delta y}{y_2}]^2~y_2 - \\frac{g}{2}[y_1^2 - y_2^2]}{\\Delta y} Then gather all the terms involving u_j onto the left hand side as u_j^2 - \\frac{u_j^2 \\Delta y}{y_2} + \\frac{2 u_1 (y_1 - \\Delta y)}{y_2} = \\frac{- u_1^2(y_1 - ~ \\Delta y)}{\\Delta y} + \\frac{u_1^2 (y_1 - \\Delta y)^2}{y_2 \\Delta y} - \\frac{g}{2 \\Delta y}[y_1^2 - y_2^2] Now we are ready for computation - if we \"pick\" \\Delta y the only unknown is u_j ; therefore solvable. If we make a set of guesses, we can compute required jet speed and jet total area. First some preliminary coding, to use different jet speeds for a given \\Delta y dy = 0.1 #delta y width = 8.0 grav = 32.2 # gravitational acceleration constant (US Customary Units) u1 = 1.0 #free stream approach y1 = 4.0 #approach depth y2 = y1 + 6.0*(u1**2)/(2.0*grav) #exit depth as velocity head rhs = -u1*u1*(y1-dy)/dy + (u1*u1*(y1-dy)**2)/(y2*dy) - grav*(y1**2-y2**2)/(2*dy) for i in range(1,200): uj = float(i)*0.1 lhs = uj**2*(1-dy/y2) + 2*u1*(y1-dy)*uj/y2 if abs(lhs-rhs) <=2: #only print when close print('uj = ',round(uj,2),'LHS = ',round(lhs,2),'RHS = ',round(rhs,2)) uj = 10.1 LHS = 118.76 RHS = 119.56 uj = 10.2 LHS = 120.94 RHS = 119.56 So for a \\Delta y of 0.1, the required jet speed is somewhere around 10.1 feet per second. Now we need to determine the total jet area, and nominal sizes. areajet = dy*width import math def howManyJets(jetarea,diameter): perjet = 0.25*math.pi*diameter**2 if jetarea%perjet == 0: howManyJets = jetarea/perjet elif jetarea%perjet != 0: howManyJets = jetarea//perjet + 1 return howManyJets inches = 1/12 howManyJets(areajet,inches) 147.0 So for \\Delta y of 0.1 we will need 147 1-inch diameter jets. The next step is to refine and generalize our solution so we can explore different speeds - for example a 10 ft/sec jet will probably skin a fish, not healthy for our application. For refinement, lets improve the precision of the jet speed calculation (i.e. automate the matching of lhs and rhs)","title":"Rudimentary Guess-Check Approach"},{"location":"fluid/#algorithm-refinement","text":"","title":"Algorithm (Refinement)"},{"location":"fluid/#semi-automated-quasi-newtonapproach","text":"Link to the JupyterLab notebook directory for this example","title":"Semi-Automated, Quasi-Newton,Approach"},{"location":"placeholder/","text":"Placeholder file Replace with content, then update the index page, recompile and serve","title":"Placeholder"},{"location":"placeholder/#placeholder-file","text":"Replace with content, then update the index page, recompile and serve","title":"Placeholder file"}]}